// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoApi.Models;

#nullable disable

namespace VideoApi.Migrations
{
    [DbContext(typeof(VideoUploadContext))]
    [Migration("20240329183039_CreatingTable")]
    partial class CreatingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VideoApi.Models.TemporaryChunkDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("CurrentChunk")
                        .HasColumnType("int");

                    b.Property<int>("TotalChunks")
                        .HasColumnType("int");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id")
                        .HasName("PK_TEMP_ID");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("TemporaryChunkDetails");
                });

            modelBuilder.Entity("VideoApi.Models.VideoMetaData", b =>
                {
                    b.Property<string>("VideoId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VideoLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isVideoProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("isVideoUploaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("VideoId")
                        .HasName("PK_VIDEOID");

                    b.ToTable("VideoMetaData");
                });

            modelBuilder.Entity("VideoApi.Models.TemporaryChunkDetails", b =>
                {
                    b.HasOne("VideoApi.Models.VideoMetaData", "Video")
                        .WithOne("TemporaryChunks")
                        .HasForeignKey("VideoApi.Models.TemporaryChunkDetails", "VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoApi.Models.VideoMetaData", b =>
                {
                    b.Navigation("TemporaryChunks")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
